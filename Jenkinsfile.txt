pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME = tool 'Sonar-Scanner'
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/HajarTalaat/Netflix.git'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectName=Netflix \
                        -Dsonar.projectKey=Netflix
                    '''
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: true, credentialsId: 'Netflix'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }
        stage('TRIVY FS Scan') {
            steps {
                sh 'trivy fs . > trivyfs.txt'
            }
        }
        stage('Docker Build & Push') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'cb176d10-d362-4952-bfc7-3942530b0ca5', passwordVariable: 'password', usernameVariable: 'username')]) {
                        sh '''
                            docker build --build-arg TMDB_V3_API_KEY=0b85bb29b9b7f28bd7669b5465461b7a -t hatalaat/netflix:${BUILD_NUMBER} .
                            docker login -u ${username} -p ${password}
                            docker push hatalaat/netflix:${BUILD_NUMBER}
                        '''
                    }
                }
            }
        }
        stage('Image Scan') {
            steps {
                sh 'trivy image hatalaat/netflix:${BUILD_NUMBER} > trivyimage.txt'
            }
        }
        stage('Deploy to Container') {
            steps {
                script {
                    def containerExists = sh(script: "docker ps -a --filter name=netflix --format '{{.Names}}'", returnStdout: true).trim()
                    if (containerExists == 'netflix') {
                        echo 'Container with name "netflix" already exists. Skipping Docker run step.'
                    } else {
                        sh 'docker run -d --name netflix -p 8081:80 hatalaat/netflix:${BUILD_NUMBER}'
                    }
                }
            }
        }
    }
    post {
        always {
            emailext attachLog: true,
                subject: "'${currentBuild.result}'",
                body: "Project: ${env.JOB_NAME}<br/>" +
                      "Build Number: ${env.BUILD_NUMBER}<br/>" +
                      "URL: ${env.BUILD_URL}<br/>",
                to: 'hager.t.ibrahim@gmail.com',
                attachmentsPattern: 'trivyfs.txt'
        }
    }
}
